//This code was generated by a tool.
//Changes to this file will be lost if the code is regenerated.
// See the blog post here for help on using the generated code: http://erikej.blogspot.dk/2014/10/database-first-with-sqlite-in-universal.html
using ACastShared;
using SQLite;
using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Windows.Storage;
using Windows.UI.Xaml.Media.Imaging;
using Windows.Web.Syndication;

namespace ACast.Database
{
    public class SQLiteDb
    {        
        public static void Create()
        {
            var task = Task.Run(async () =>
            {

                var folders = await KnownFolders.RemovableDevices.GetFoldersAsync();
                if (!await FileExtensions.FileExist2(folders[0], "Database.db"))
                {
                    using (SQLiteConnection db = new SQLiteConnection(Path.Combine("D:\\", "Database.db"), true))
                    {
                        db.CreateTable<FeedItem>();
                        db.CreateTable<Feed>();
                    }
                }
            });

            task.Wait();
        }

        public static IEnumerable<Feed> GetFeeds()
        {
            try
            {
                SQLiteConnection db = new SQLiteConnection(Path.Combine("D:\\", "Database.db"), true);
                if(db.Table<Feed>().Any())
                    return db.Table<Feed>();
            }
            catch /*(Exception ex)*/
            {
            }
            return null;
        }

        public static IEnumerable<FeedItem> GetFeedItems(int parentId)
        {
            if (parentId < 0)
            {
                return null;
            }

            try
            {
                SQLiteConnection db = new SQLiteConnection(Path.Combine("D:\\", "Database.db"), true);
                if (db.Table<FeedItem>().Any()) {
                    var items = from item in db.Table<FeedItem>() where item.ParentId == parentId select item;
                    return items;
                }
            }
            catch /*(Exception ex)*/
            {
            }

            return null;
        }

        public static void AddFeed(Feed feed)
        {
            using (SQLiteConnection db = new SQLiteConnection(Path.Combine("D:\\", "Database.db"), true))
            {
                db.Insert(feed);
            }
        }

        public static void UpdateFeed(Feed feed)
        {
            using (SQLiteConnection db = new SQLiteConnection(Path.Combine("D:\\", "Database.db"), true))
            {
                db.Update(feed);
            }
        }        

        public static void AddFeedItem(FeedItem feedItem)
        {
            using (SQLiteConnection db = new SQLiteConnection(Path.Combine("D:\\", "Database.db"), true))
            {
                db.Insert(feedItem);
            }
        }

        public static void AddFeedItems(int parentId, IEnumerable<SyndicationItem> syndicationItems)
        {
            using (SQLiteConnection db = new SQLiteConnection(Path.Combine("D:\\", "Database.db"), true))
            {
                foreach (var syndicationItem in syndicationItems)
                {
                    db.Insert(FeedItem.Create(parentId, syndicationItem));
                }                
            }
        }

        public static void UpdateFeedItem(FeedItem feedItem)
        {
            using (SQLiteConnection db = new SQLiteConnection(Path.Combine("D:\\", "Database.db"), true))
            {
                db.Update(feedItem);
            }
        }
    }

    public partial class FeedItem : INotifyPropertyChanged
    {
        public static FeedItem Create(Int32 parentId, SyndicationItem item)
        {
            var feedItem = new FeedItem()
            {
                ParentId = parentId,
                ItemUri = item.Id,
                Title = item.Title.Text,
                Summary = item.Summary.Text,
                PublishedDate = new DateTime(item.PublishedDate.Ticks)
            };

            var links = from link in item.Links where link.MediaType.CompareTo("audio/mpeg") == 0 select link;

            if (links.Any())
            {
                feedItem.MediaUri = links.FirstOrDefault().Uri.ToString();
            }

            return feedItem;
        }

        [PrimaryKey]
        [AutoIncrementAttribute]
        public Int32 Id { get; set; }
        
        [NotNull]
        public Int32 ParentId { get; set; }

        [MaxLength(100)]
        public String ItemUri { get; set; }

        [MaxLength(100)]
        [NotNull]
        public String Title { get; set; }
        
        [MaxLength(1000)]
        public String Summary { get; set; }
        
        public DateTime PublishedDate { get; set; }
        
        [MaxLength(100)]
        public String MediaUri { get; set; }
        
        [MaxLength(100)]
        public String Path { get; set; }
        
        [MaxLength(100)]
        public String FileName { get; set; }

        public Int32 MediaDownloadState { get; set; }

        public Double PlayerPos { get; set; }

        [Ignore]
        public int DownloadProgress { get; set; }

        public void ReportDownloadProgress(object sender, int progress)
        {
            DownloadProgress = progress;
            if (PropertyChanged != null)
                PropertyChanged(this, new PropertyChangedEventArgs("DownloadProgress"));
        }

        public event PropertyChangedEventHandler PropertyChanged;
    }
    
    public partial class Feed
    {
        [PrimaryKey]
        [AutoIncrementAttribute]
        public Int32 Id { get; set; }
        
        [MaxLength(100)]
        [NotNull]
        public String Uri { get; set; }

        [MaxLength(100)]
        public String Title { get; set; }
        
        [MaxLength(100)]
        public String ImageUri { get; set; }

        [MaxLength(100)]
        public string ImageFilename { get; internal set; }

        public DateTime LastUpdateDate { get; set; }

        [Ignore]
        public BitmapImage Image
        {
            get {
                string filePathName =  Path.Combine(ApplicationData.Current.LocalFolder.Path, ImageFilename);
                return new BitmapImage(new Uri(filePathName));
            }
        }

        [Ignore]
        public string Info
        {
            get
            {
                int downloadCount = 0;
                try
                {
                    using (SQLiteConnection db = new SQLiteConnection(Path.Combine("D:\\", "Database.db"), true))
                    {
                        downloadCount = db.ExecuteScalar<int>("SELECT Count(*) FROM FeedItem WHERE ParentId = ? And MediaDownloadState = 1", Id);
                    }
                }
                catch /*(Exception)*/
                {
                }

                return string.Format("Downloaded: {0}", downloadCount);
            }
        }
    }
    
}
